{"version":3,"sources":["webpack:///src/app/authentication/authentication-routing.module.ts","webpack:///src/app/authentication/authentication.component.ts","webpack:///src/app/authentication/authentication.component.html","webpack:///src/app/authentication/authentication.module.ts","webpack:///src/app/authentication/components/loading/loading.component.ts","webpack:///src/app/authentication/components/loading/loading.component.html","webpack:///src/app/authentication/components/login-admin/login-admin.component.ts","webpack:///src/app/authentication/components/login-admin/login-admin.component.html","webpack:///src/app/authentication/components/login/login.component.ts","webpack:///src/app/authentication/components/login/login.component.html","webpack:///src/app/authentication/components/mot-passe-oublier/mot-passe-oublier.component.ts","webpack:///src/app/authentication/components/mot-passe-oublier/mot-passe-oublier.component.html","webpack:///src/app/authentication/components/page-inaccessible/page-inaccessible.component.ts","webpack:///src/app/authentication/components/page-inaccessible/page-inaccessible.component.html","webpack:///src/app/authentication/components/renisialiser-mot-passe/renisialiser-mot-passe.component.ts","webpack:///src/app/authentication/components/renisialiser-mot-passe/renisialiser-mot-passe.component.html","webpack:///src/app/services/authentication/api-authentication.service.ts"],"names":["routes","path","children","loadChildren","then","module","LoginAdminModule","LoginModule","MotPasseOublierModule","RenisialiserMotPasseModule","PageInaccessibleModule","AuthenticationRoutingModule","forChild","imports","exports","AuthenticationComponent","selector","templateUrl","styleUrls","AuthenticationModule","declarations","LoadingComponent","USER_ADMIN_KEY","LoginAdminComponent","tokenStorageService","fb","notificationToast","informationsService","http","router","apiAuthenticationService","isLoading","erreurLogin","email","password","isErreurs","formC","group","required","min","signOut","key","document","getElementById","classList","remove","controls","status","add","value","length","chargerErreurs","showErrorSmall","request","loginAdmin","subscribe","res","response","saveToken","token","navigate","showSuccessSmall","err","alert","saveRoleSuperAdmin","login","LoginComponent","sessionCaisseSer","fonctionPartagesService","isOpenModalSocietes","isOpenModalExercices","user","saveUser","openModalSocietes","openModalExercices","utilisateur","getUser","id","resultat","sessionCaisse","setSessionCaisseCurrent","error","closeModalSocietes","closeModalExercices","MotPasseOublierComponent","toastNotificationService","pattern","baseUrl","baseURLAngular","modifierMotPasse","envoyer","PageInaccessibleComponent","getElementsByTagName","setAttribute","clientHeight","windowsHeight","window","innerHeight","marginTop","RenisialiserMotPasseComponent","_Activatedroute","newPassword","newPasswordValidate","code","console","log","snapshot","paramMap","get","renisialiserMotPasse","httpOptions","headers","ApiAuthenticationService","informationGenerale","AUTH_API","post","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,QAAMA,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,cAAQ,EAAE,CACR;AACED,YAAI,EAAE,aADR;AAEEE,oBAAY,EAAE;AAAA,iBAAM;AAAA;AAAA;AAAA;AAAA,oFAAsDC,IAAtD,CAA2D,UAAAC,MAAM;AAAA,mBAAIA,MAAM,CAACC,gBAAX;AAAA,WAAjE,CAAN;AAAA;AAFhB,OADQ,EAKR;AACEL,YAAI,EAAE,OADR;AAEEE,oBAAY,EAAE;AAAA,iBAAM;AAAA;AAAA;AAAA;AAAA,wEAA0CC,IAA1C,CAA+C,UAAAC,MAAM;AAAA,mBAAIA,MAAM,CAACE,WAAX;AAAA,WAArD,CAAN;AAAA;AAFhB,OALQ,EASR;AACEN,YAAI,EAAE,iBADR;AAEEE,oBAAY,EAAE;AAAA,iBAAM;AAAA;AAAA;AAAA;AAAA,gGAAkEC,IAAlE,CAAuE,UAAAC,MAAM;AAAA,mBAAIA,MAAM,CAACG,qBAAX;AAAA,WAA7E,CAAN;AAAA;AAFhB,OATQ,EAaR;AACEP,YAAI,EAAE,kCADR;AAEEE,oBAAY,EAAE;AAAA,iBAAM;AAAA;AAAA;AAAA;AAAA,0GAA4EC,IAA5E,CAAiF,UAAAC,MAAM;AAAA,mBAAIA,MAAM,CAACI,0BAAX;AAAA,WAAvF,CAAN;AAAA;AAFhB,OAbQ,EAkBR;AACER,YAAI,EAAE,mBADR;AAEEE,oBAAY,EAAE;AAAA,iBAAM;AAAA;AAAA;AAAA;AAAA,gGAAkEC,IAAlE,CAAuE,UAAAC,MAAM;AAAA,mBAAIA,MAAM,CAACK,sBAAX;AAAA,WAA7E,CAAN;AAAA;AAFhB,OAlBQ;AAFZ,KADqB,CAAvB;;QAkCaC,2B;;;;;YAAAA;;;;yBAAAA,2B;AAA2B,O;AAAA,gBAH7B,CAAC,6DAAaC,QAAb,CAAsBZ,MAAtB,CAAD,CAG6B,EAF5B,4DAE4B;;;;0HAA3BW,2B,EAA2B;AAAA;AAAA,kBAF5B,4DAE4B;AAAA,O;AAFhB,K;;;;;sEAEXA,2B,EAA2B;cAJvC,sDAIuC;eAJ9B;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBZ,MAAtB,CAAD,CADD;AAERc,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAI8B,Q;;;;;;;;;;;;;;;;;;ACtCxC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,uB;;;AAEX,yCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,uB;AAAuB,K;;;YAAvBA,uB;AAAuB,yC;AAAA,c;AAAA,a;AAAA;AAAA;ACPpC;;AAAG;;AAAqB;;;;;;;;sEDOXA,uB,EAAuB;cALnC,uDAKmC;eALzB;AACTC,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,iCAAD;AAHF,S;AAKyB,Q;;;;;;;;;;;;;;;;;;;;AEPpC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAwBaC,oB;;;;;YAAAA;;;;yBAAAA,oB;AAAoB,O;AAAA,gBAPtB,CACP,4DADO,EAEP,0FAFO,EAGP,0DAHO,EAGM,kEAHN,EAIP,uFAJO,CAOsB;;;;0HAApBA,oB,EAAoB;AAAA,uBARhB,iFAQgB,EARS,gFAQT,EARyB,kHAQzB,EARmD,iIAQnD,EARkF,sFAQlF,EARoG,mHAQpG,EAR+H,kGAQ/H;AARkJ,kBAE/K,4DAF+K,EAG/K,0FAH+K,EAI/K,0DAJ+K,EAIlK,kEAJkK,EAK/K,uFAL+K;AAQlJ,O;AAHX,K;;;;;sEAGTA,oB,EAAoB;cAThC,sDASgC;eATvB;AACRC,sBAAY,EAAE,CAAC,iFAAD,EAA0B,gFAA1B,EAA0C,kHAA1C,EAAoE,iIAApE,EAAmG,sFAAnG,EAAqH,mHAArH,EAAgJ,kGAAhJ,CADN;AAERP,iBAAO,EAAE,CACP,4DADO,EAEP,0FAFO,EAGP,0DAHO,EAGM,kEAHN,EAIP,uFAJO;AAFD,S;AASuB,Q;;;;;;;;;;;;;;;;;;ACxBjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaQ,gB;;;AAEX,kCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,gB;AAAgB,K;;;YAAhBA,gB;AAAgB,kC;AAAA,c;AAAA,a;AAAA,uF;AAAA;AAAA;ACP7B;;AACI;;AAAsB;;AAAU;;AACpC;;;;;;;;sEDKaA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACTL,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;AEP7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACkBY;;;;;;;;ADRZ,QAAMI,cAAc,GAAG,gBAAvB;;QAOaC,mB;;;AAcX,mCAAoBC,mBAApB,EAAqEC,EAArE,EAA6FC,iBAA7F,EAAmJC,mBAAnJ,EAAoMC,IAApM,EAA8NC,MAA9N,EAAqPC,wBAArP,EAAsS;AAAA;;AAAlR,aAAAN,mBAAA,GAAAA,mBAAA;AAAiD,aAAAC,EAAA,GAAAA,EAAA;AAAwB,aAAAC,iBAAA,GAAAA,iBAAA;AAAsD,aAAAC,mBAAA,GAAAA,mBAAA;AAAiD,aAAAC,IAAA,GAAAA,IAAA;AAA0B,aAAAC,MAAA,GAAAA,MAAA;AAAuB,aAAAC,wBAAA,GAAAA,wBAAA;AAXrP,aAAAC,SAAA,GAAY,KAAZ;AAEA,aAAAC,WAAA,GAAc;AACZC,eAAK,EAAC,EADM;AAEZC,kBAAQ,EAAC;AAFG,SAAd;AAKA,aAAAC,SAAA,GAAY,KAAZ;AAKE,aAAKC,KAAL,GAAa,KAAKX,EAAL,CAAQY,KAAR,CAAc;AACvBJ,eAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWK,QAAZ,EAAsB,0DAAWC,GAAX,CAAe,CAAf,CAAtB,CAAL,CADgB;AAEvBL,kBAAQ,EAAC,CAAC,EAAD,EAAI,CAAC,0DAAWI,QAAZ,EAAsB,0DAAWC,GAAX,CAAe,CAAf,CAAtB,CAAJ;AAFc,SAAd,CAAb;AAID;;;;mCAEO;AACN,eAAKf,mBAAL,CAAyBgB,OAAzB;AACD;;;yCAEa;AAEZ,eAAI,IAAIC,GAAR,IAAe,KAAKT,WAApB,EAAgC;AAC5B,iBAAKA,WAAL,CAAiBS,GAAjB,IAAwB,EAAxB;;AACA,gBAAGC,QAAQ,CAACC,cAAT,CAAwBF,GAAxB,KAAgC,IAAnC,EAAwC;AACtCC,sBAAQ,CAACC,cAAT,CAAwBF,GAAxB,EAA6BG,SAA7B,CAAuCC,MAAvC,CAA8C,eAA9C;AACD;AACJ;;AAED,eAAKV,SAAL,GAAiB,KAAjB;;AAEA,cAAG,KAAKC,KAAL,CAAWU,QAAX,CAAoBb,KAApB,CAA0Bc,MAA1B,IAAoC,OAAvC,EAA+C;AAC7C,iBAAKf,WAAL,CAAiBC,KAAjB,GAAyB,gCAAzB;;AACA,gBAAGS,QAAQ,CAACC,cAAT,CAAwB,OAAxB,KAAoC,IAAvC,EAA4C;AAC1CD,sBAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,SAAjC,CAA2CI,GAA3C,CAA+C,eAA/C;AACD;;AACD,iBAAKb,SAAL,GAAiB,IAAjB;AACD;;AAED,cAAG,KAAKC,KAAL,CAAWa,KAAX,CAAiBf,QAAjB,CAA0BgB,MAA1B,GAAmC,CAAtC,EAAwC;AACtC,iBAAKlB,WAAL,CAAiBE,QAAjB,GAA4B,uCAA5B;;AACA,gBAAGQ,QAAQ,CAACC,cAAT,CAAwB,UAAxB,KAAuC,IAA1C,EAA+C;AAC7CD,sBAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,SAApC,CAA8CI,GAA9C,CAAkD,eAAlD;AACD;;AACD,iBAAKb,SAAL,GAAiB,IAAjB;AACD;;AAED,iBAAO,KAAKA,SAAZ;AACD;;;gCAGI;AAAA;;AAEH,cAAG,KAAKgB,cAAL,EAAH,EAA0B;AACxB,iBAAKzB,iBAAL,CAAuB0B,cAAvB,CAAsC,4CAAtC;AACA;AACD;;AAED,cAAG,KAAKrB,SAAR,EAAkB;AAChB;AACD;;AAED,eAAKA,SAAL,GAAiB,IAAjB;AACA,cAAIsB,OAAO,GAAG;AAACpB,iBAAK,EAAC,KAAKG,KAAL,CAAWa,KAAX,CAAiBhB,KAAxB;AAA+BC,oBAAQ,EAAC,KAAKE,KAAL,CAAWa,KAAX,CAAiBf;AAAzD,WAAd;AAEA,eAAKJ,wBAAL,CAA8BwB,UAA9B,CAAyCD,OAAzC,EAAkDE,SAAlD,CACE,UAAAC,GAAG,EAAI;AACL,iBAAI,CAACzB,SAAL,GAAiB,KAAjB;AACA,gBAAI0B,QAAQ,GAAQD,GAApB;;AACA,gBAAGC,QAAQ,CAACV,MAAZ,EAAmB;AACjB,mBAAI,CAACW,SAAL,CAAeD,QAAQ,CAACE,KAAxB;;AACA,mBAAI,CAAC9B,MAAL,CAAY+B,QAAZ,CAAqB,CAAC,0BAAD,CAArB;;AACA,mBAAI,CAAClC,iBAAL,CAAuBmC,gBAAvB,CAAwC,uCAAxC;AACD,aAJD,MAIK;AACH,mBAAI,CAAC9B,SAAL,GAAiB,KAAjB;;AACA,mBAAI,CAACL,iBAAL,CAAuB0B,cAAvB,CAAsC,uCAAtC;AACD;AACF,WAZH,EAYK,UAAAU,GAAG,EAAI;AACR,iBAAI,CAAC/B,SAAL,GAAiB,KAAjB;AACAgC,iBAAK,CAAC,gDAAD,CAAL;AACD,WAfH;AAiBD;;;kCAEgBJ,K,EAAU;AACzB,eAAKnC,mBAAL,CAAyBkC,SAAzB,CAAmCC,KAAnC,EAA0C,EAA1C;AACA,eAAKnC,mBAAL,CAAyBwC,kBAAzB;AACD;;;;;;;uBA5FUzC,mB,EAAmB,0K,EAAA,2H,EAAA,qK,EAAA,0J,EAAA,gI,EAAA,uH,EAAA,oL;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA,e;AAAA,a;AAAA,6f;AAAA;AAAA;ACjBhC;;AAEI;;AACI;;AACI;;AAAI;;AAAS;;AAIb;;AAAO;;AAAG;;AAAiB;;AAAI;;AAC/B;;AACA;;AAAkB;;AAClB;;AAEA;;AAAO;;AAAG;;AAAY;;AAAI;;AAC1B;;AACA;;AAAkB;;AAClB;;AAEA;;AAEA;;AACI;;AAA2E;;AAAoB;;AAC/F;;AAA+C;AAAA,mBAAS,IAAA0C,KAAA,EAAT;AAAgB,WAAhB;;AAA/C;;AACJ;;AAEJ;;AACJ;;AAIJ;;;;AA3Bc;;AAAA;;AAOgB;;AAAA;;AAKA;;AAAA;;AAGL;;AAAA;;AAGe;;AAAA;;;;;;;;;sEDJ3B1C,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTP,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEjBhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACkBY;;;;;;;;QDDCgD,c;;;AAeX,8BACU1C,mBADV,EAEU2C,gBAFV,EAGU1C,EAHV,EAGkCC,iBAHlC,EAIUC,mBAJV,EAKUC,IALV,EAKoCC,MALpC,EAMUC,wBANV,EAOSsC,uBAPT,EAOyD;AAAA;;AAN/C,aAAA5C,mBAAA,GAAAA,mBAAA;AACA,aAAA2C,gBAAA,GAAAA,gBAAA;AACA,aAAA1C,EAAA,GAAAA,EAAA;AAAwB,aAAAC,iBAAA,GAAAA,iBAAA;AACxB,aAAAC,mBAAA,GAAAA,mBAAA;AACA,aAAAC,IAAA,GAAAA,IAAA;AAA0B,aAAAC,MAAA,GAAAA,MAAA;AAC1B,aAAAC,wBAAA,GAAAA,wBAAA;AACD,aAAAsC,uBAAA,GAAAA,uBAAA;AAnBT,aAAArC,SAAA,GAAY,KAAZ;AAEA,aAAAC,WAAA,GAAc;AACZC,eAAK,EAAC,EADM;AAEZC,kBAAQ,EAAC;AAFG,SAAd;AAKA,aAAAC,SAAA,GAAY,KAAZ;AAuFA,aAAAkC,mBAAA,GAAsB,KAAtB;AAUA,aAAAC,oBAAA,GAAuB,KAAvB;AApFE,aAAKlC,KAAL,GAAa,KAAKX,EAAL,CAAQY,KAAR,CAAc;AACzBJ,eAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWK,QAAZ,EAAsB,0DAAWC,GAAX,CAAe,CAAf,CAAtB,CAAL,CADkB;AAEzBL,kBAAQ,EAAC,CAAC,EAAD,EAAI,CAAC,0DAAWI,QAAZ,EAAsB,0DAAWC,GAAX,CAAe,CAAf,CAAtB,CAAJ;AAFgB,SAAd,CAAb;AAID;;;;mCAEO,CACP;AACA;;;yCAEa;AAEZ,eAAI,IAAIE,GAAR,IAAe,KAAKT,WAApB,EAAgC;AAC5B,iBAAKA,WAAL,CAAiBS,GAAjB,IAAwB,EAAxB;;AACA,gBAAGC,QAAQ,CAACC,cAAT,CAAwBF,GAAxB,KAAgC,IAAnC,EAAwC;AACtCC,sBAAQ,CAACC,cAAT,CAAwBF,GAAxB,EAA6BG,SAA7B,CAAuCC,MAAvC,CAA8C,eAA9C;AACD;AACJ;;AAED,eAAKV,SAAL,GAAiB,KAAjB;;AAEA,cAAG,KAAKC,KAAL,CAAWU,QAAX,CAAoBb,KAApB,CAA0Bc,MAA1B,IAAoC,OAAvC,EAA+C;AAC7C,iBAAKf,WAAL,CAAiBC,KAAjB,GAAyB,gCAAzB;;AACA,gBAAGS,QAAQ,CAACC,cAAT,CAAwB,OAAxB,KAAoC,IAAvC,EAA4C;AAC1CD,sBAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,SAAjC,CAA2CI,GAA3C,CAA+C,eAA/C;AACD;;AACD,iBAAKb,SAAL,GAAiB,IAAjB;AACD;;AAED,cAAG,KAAKC,KAAL,CAAWa,KAAX,CAAiBf,QAAjB,CAA0BgB,MAA1B,GAAmC,CAAtC,EAAwC;AACtC,iBAAKlB,WAAL,CAAiBE,QAAjB,GAA4B,uCAA5B;;AACA,gBAAGQ,QAAQ,CAACC,cAAT,CAAwB,UAAxB,KAAuC,IAA1C,EAA+C;AAC7CD,sBAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,SAApC,CAA8CI,GAA9C,CAAkD,eAAlD;AACD;;AACD,iBAAKb,SAAL,GAAiB,IAAjB;AACD;;AAED,iBAAO,KAAKA,SAAZ;AACD;;;gCAGI;AAAA;;AAEH,cAAG,KAAKgB,cAAL,EAAH,EAA0B;AACxB,iBAAKzB,iBAAL,CAAuB0B,cAAvB,CAAsC,4CAAtC;AACA;AACD;;AAED,cAAG,KAAKrB,SAAR,EAAkB;AAChB;AACD;;AAED,eAAKA,SAAL,GAAiB,IAAjB;AACA,cAAIsB,OAAO,GAAG;AAACpB,iBAAK,EAAC,KAAKG,KAAL,CAAWa,KAAX,CAAiBhB,KAAxB;AAA+BC,oBAAQ,EAAC,KAAKE,KAAL,CAAWa,KAAX,CAAiBf;AAAzD,WAAd;AAEA,eAAKJ,wBAAL,CAA8BmC,KAA9B,CAAoCZ,OAApC,EAA6CE,SAA7C,CACE,UAAAC,GAAG,EAAI;AACL,kBAAI,CAACzB,SAAL,GAAiB,KAAjB;AACA,gBAAI0B,QAAQ,GAAQD,GAApB;;AACA,gBAAGC,QAAQ,CAACV,MAAZ,EAAmB;AACjB,oBAAI,CAACvB,mBAAL,CAAyBkC,SAAzB,CAAmCD,QAAQ,CAACE,KAA5C,EAAmDF,QAAQ,CAACc,IAA5D;;AACA,oBAAI,CAAC/C,mBAAL,CAAyBgD,QAAzB,CAAkCf,QAAQ,CAACc,IAA3C;;AACA,oBAAI,CAACE,iBAAL;AACD,aAJD,MAIK;AACH,oBAAI,CAAC1C,SAAL,GAAiB,KAAjB;;AACA,oBAAI,CAACL,iBAAL,CAAuB0B,cAAvB,CAAsC,uCAAtC;AACD;AACF,WAZH,EAYK,UAAAU,GAAG,EAAI;AACR,kBAAI,CAAC/B,SAAL,GAAiB,KAAjB;AACAgC,iBAAK,CAAC,gDAAD,CAAL;AACD,WAfH;AAiBD;;;4CAGgB;AACf,eAAKM,mBAAL,GAA2B,IAA3B;AACD;;;6CAEiB;AAChB,eAAKA,mBAAL,GAA2B,KAA3B;AACA,eAAKK,kBAAL;AACD;;;6CAGiB;AAChB,eAAKJ,oBAAL,GAA4B,IAA5B;AACD;;;8CAEkB;AACjB;AACA,eAAKzC,MAAL,CAAY+B,QAAZ,CAAqB,CAAC,oBAAD,CAArB;AAEA,eAAKU,oBAAL,GAA4B,KAA5B;AACD;;;sDAE6B;AAAA;;AAC5B,eAAKvC,SAAL,GAAiB,IAAjB;AACA,cAAI4C,WAAW,GAAG,KAAKnD,mBAAL,CAAyBoD,OAAzB,EAAlB;AACA,eAAKT,gBAAL,CAAsBQ,WAAtB,CAAkCA,WAAW,CAACE,EAA9C,EACGtB,SADH,CAEI,UAAAC,GAAG,EAAI;AACL,kBAAI,CAACzB,SAAL,GAAiB,KAAjB;AACA,gBAAI+C,QAAQ,GAAQtB,GAApB;;AACA,gBAAIsB,QAAQ,CAAC/B,MAAT,IAAmB,KAAvB,EACG;AACE,oBAAI,CAAClB,MAAL,CAAY+B,QAAZ,CAAqB,CAAC,sBAAD,CAArB;AACD,aAHJ,MAGQ;AACJ,kBAAImB,aAAa,GAAGD,QAAQ,CAACA,QAA7B;;AACA,oBAAI,CAACnD,mBAAL,CAAyBqD,uBAAzB,CAAiDD,aAAjD;;AACA,oBAAI,CAAClD,MAAL,CAAY+B,QAAZ,CAAqB,CAAC,oBAAD,CAArB;AACA;AACL,WAbL,EAcI,UAAAqB,KAAK,EAAI;AACP,kBAAI,CAAClD,SAAL,GAAiB,KAAjB;AACAgC,iBAAK,CAAC,gDAAD,CAAL;AACD,WAjBL;AAkBD;;;;;;;uBA5IUG,c,EAAc,0K,EAAA,+K,EAAA,2H,EAAA,qK,EAAA,0J,EAAA,gI,EAAA,uH,EAAA,oL,EAAA,mK;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,qiB;AAAA;AAAA;ACjB3B;;AAEI;;AACI;;AACI;;AAAI;;AAAS;;AAIb;;AAAO;;AAAG;;AAAiB;;AAAI;;AAC/B;;AACA;;AAAkB;;AAClB;;AAEA;;AAAO;;AAAG;;AAAY;;AAAI;;AAC1B;;AACA;;AAAkB;;AAClB;;AAEA;;AAEA;;AACI;;AAA2E;;AAAoB;;AAC/F;;AAA+C;AAAA,mBAAS,IAAAD,KAAA,EAAT;AAAgB,WAAhB;;AAA/C;;AACJ;;AAEJ;;AACJ;;AAIJ;;AAEA;;AAAgC;AAAA,mBAAiB,IAAAiB,kBAAA,EAAjB;AAAqC,WAArC;;AAA+E;;AAE/G;;AAAiC;AAAA,mBAAiB,IAAAC,mBAAA,EAAjB;AAAsC,WAAtC;;AAAiF;;;;AA/BpG;;AAAA;;AAOgB;;AAAA;;AAKA;;AAAA;;AAGL;;AAAA;;AAGe;;AAAA;;AAW+B;;AAAA;;AAEE;;AAAA;;;;;;;;;sEDjB5DjB,c,EAAc;cAL1B,uDAK0B;eALhB;AACTlD,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEjB3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACcgC;;;;QDAnBkE,wB;;;AAaX,wCAAoBC,wBAApB,EAA+EvD,wBAA/E,EAA0IL,EAA1I,EAAkKE,mBAAlK,EAAmNC,IAAnN,EAA6OC,MAA7O,EAA4P;AAAA;;AAAxO,aAAAwD,wBAAA,GAAAA,wBAAA;AAA2D,aAAAvD,wBAAA,GAAAA,wBAAA;AAA2D,aAAAL,EAAA,GAAAA,EAAA;AAAwB,aAAAE,mBAAA,GAAAA,mBAAA;AAAiD,aAAAC,IAAA,GAAAA,IAAA;AAA0B,aAAAC,MAAA,GAAAA,MAAA;AAV7O,aAAAE,SAAA,GAAY,KAAZ;AAEA,aAAAC,WAAA,GAAc;AACZC,eAAK,EAAC;AADM,SAAd;AAIA,aAAAE,SAAA,GAAY,KAAZ;AAKI,aAAKC,KAAL,GAAa,KAAKX,EAAL,CAAQY,KAAR,CAAc;AACzBJ,eAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWK,QAAZ,EAAsB,0DAAWL,KAAjC,EAAuC,0DAAWqD,OAAX,CAAmB,2CAAnB,CAAvC,CAAL;AADkB,SAAd,CAAb;AAGH;;;;mCAEO,CAEN;;;yCAEa;AAEb,eAAI,IAAI7C,GAAR,IAAe,KAAKT,WAApB,EAAgC;AAC5B,iBAAKA,WAAL,CAAiBS,GAAjB,IAAwB,EAAxB;;AACA,gBAAGC,QAAQ,CAACC,cAAT,CAAwBF,GAAxB,KAAgC,IAAnC,EAAwC;AACtCC,sBAAQ,CAACC,cAAT,CAAwBF,GAAxB,EAA6BG,SAA7B,CAAuCC,MAAvC,CAA8C,eAA9C;AACD;AACJ;;AAED,eAAKV,SAAL,GAAiB,KAAjB;;AAEA,cAAG,KAAKC,KAAL,CAAWU,QAAX,CAAoBb,KAApB,CAA0Bc,MAA1B,IAAoC,OAAvC,EAA+C;AAC7C,iBAAKf,WAAL,CAAiBC,KAAjB,GAAyB,gCAAzB;;AACA,gBAAGS,QAAQ,CAACC,cAAT,CAAwB,OAAxB,KAAoC,IAAvC,EAA4C;AAC1CD,sBAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,SAAjC,CAA2CI,GAA3C,CAA+C,eAA/C;AACD;;AACD,iBAAKb,SAAL,GAAiB,IAAjB;AACD;;AAED,iBAAO,KAAKA,SAAZ;AACD;;;kCAEM;AAAA;;AAEL,cAAI,KAAKgB,cAAL,EAAJ,EAA2B;AACzB;AACD;;AAED,cAAG,KAAKpB,SAAR,EAAkB;AAChB;AACD;;AAED,eAAKA,SAAL,GAAiB,IAAjB;AAEA,cAAIsB,OAAO,GAAG;AAACpB,iBAAK,EAAC,KAAKG,KAAL,CAAWa,KAAX,CAAiBhB,KAAxB;AAA+BsD,mBAAO,EAAC,KAAK5D,mBAAL,CAAyB6D,cAAzB,GAAyC;AAAhF,WAAd;AAEA,eAAK1D,wBAAL,CAA8B2D,gBAA9B,CAA+CpC,OAA/C,EAAwDE,SAAxD,CACE,UAAAC,GAAG,EAAI;AACL,kBAAI,CAACzB,SAAL,GAAiB,KAAjB;AACA,gBAAI0B,QAAQ,GAAQD,GAApB;;AACA,gBAAGC,QAAQ,CAACV,MAAZ,EAAmB;AACjB,oBAAI,CAACsC,wBAAL,CAA8BxB,gBAA9B,CAA+C,uCAA/C;;AACA,oBAAI,CAAChC,MAAL,CAAY+B,QAAZ,CAAqB,CAAC,uBAAD,CAArB;AACD,aAHD,MAGK;AACH,oBAAI,CAACyB,wBAAL,CAA8BjC,cAA9B,CAA6C,kCAA7C;AACD;AACF,WAVH,EAUK,UAAAU,GAAG,EAAI;AACR,kBAAI,CAAC/B,SAAL,GAAiB,KAAjB;AACAgC,iBAAK,CAAC,gDAAD,CAAL;AAED,WAdH;AAgBD;;;;;;;uBA3EUqB,wB,EAAwB,qK,EAAA,oL,EAAA,2H,EAAA,0J,EAAA,gI,EAAA,uH;AAAA,K;;;YAAxBA,wB;AAAwB,4C;AAAA,e;AAAA,a;AAAA,0c;AAAA;AAAA;ACdrC;;AAEI;;AACI;;AACwB;;AAAI;;AAAqB;;AAIzB;;AAAyD;;AAAK;;AAC9D;;AAEA;;AAAkB;;AAClB;;AAEA;;AAEA;;AACI;;AAAiC;AAAA,mBAAS,IAAAM,OAAA,EAAT;AAAkB,WAAlB;;AAAjC;;AACJ;;AACJ;;AACJ;;AAGxB;;;;AApBc;;AAAA;;AAQoC;;AAAA;;AAGL;;AAAA;;;;;;;;;sEDAhCN,wB,EAAwB;cALpC,uDAKoC;eAL1B;AACTpE,kBAAQ,EAAE,uBADD;AAETC,qBAAW,EAAE,oCAFJ;AAGTC,mBAAS,EAAE,CAAC,oCAAD;AAHF,S;AAK0B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEdrC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQayE,yB;;;AAEX,2CAAc;AAAA;AAAG;;;;mCAET;AACNjD,kBAAQ,CAACkD,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,EAAyCC,YAAzC,CAAsD,OAAtD,EAA8D,yBAA9D;AACAnD,kBAAQ,CAACkD,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,EAAyCC,YAAzC,CAAsD,OAAtD,EAA8D,EAA9D;AAEA,cAAIC,YAAY,GAAGpD,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCmD,YAAvD;AACA,cAAIC,aAAa,GAAGC,MAAM,CAACC,WAA3B;AAAuC;AACvC,cAAIC,SAAS,GAAG,CAACH,aAAa,GAAGD,YAAjB,IAAiC,CAAjD;;AACA,cAAGI,SAAS,GAAG,CAAf,EAAiB;AACfxD,oBAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCkD,YAApC,CAAiD,OAAjD,EAA0D,gBAAcK,SAAd,GAAwB,KAAlF;AAED;AACF;;;;;;;uBAfUP,yB;AAAyB,K;;;YAAzBA,yB;AAAyB,4C;AAAA,e;AAAA,a;AAAA,qP;AAAA;AAAA;ACRtC;;AACO;;AACA;;AAA6C;;AAAG;;AAChD;;AAAyD;;AAAgB;;AACzE;;AAAuC;;AACtC;;AAAI;;AAAsB;;AAAoC;;AAAkB;;AAAK;;AAAW;;AAAY;;AAAiB;;AAAI;;AAAC;;AAClI;;AAER;;;;;;;;sEDAaA,yB,EAAyB;cALrC,uDAKqC;eAL3B;AACT3E,kBAAQ,EAAE,uBADD;AAETC,qBAAW,EAAE,oCAFJ;AAGTC,mBAAS,EAAE,CAAC,oCAAD;AAHF,S;AAK2B,Q;;;;;;;;;;;;;;;;;;;;AERtC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACeM;;;;QDAOiF,6B;;;AAaX,6CAAoBd,wBAApB,EAA+Ee,eAA/E,EAAuHtE,wBAAvH,EAAoLL,EAApL,EAA4MG,IAA5M,EAAsOC,MAAtO,EAAqP;AAAA;;AAAjO,aAAAwD,wBAAA,GAAAA,wBAAA;AAA2D,aAAAe,eAAA,GAAAA,eAAA;AAAwC,aAAAtE,wBAAA,GAAAA,wBAAA;AAA6D,aAAAL,EAAA,GAAAA,EAAA;AAAwB,aAAAG,IAAA,GAAAA,IAAA;AAA0B,aAAAC,MAAA,GAAAA,MAAA;AAXtO,aAAAE,SAAA,GAAY,KAAZ;AAEA,aAAAC,WAAA,GAAc;AACZqE,qBAAW,EAAC,EADA;AAEZC,6BAAmB,EAAC;AAFR,SAAd;AAKA,aAAAnE,SAAA,GAAY,KAAZ;AAEA,aAAAoE,IAAA,GAAK,EAAL;AAGEC,eAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,aAAKrE,KAAL,GAAa,KAAKX,EAAL,CAAQY,KAAR,CAAc;AACzBgE,qBAAW,EAAC,CAAC,EAAD,EAAI,CAAC,0DAAW/D,QAAZ,EAAsB,0DAAWC,GAAX,CAAe,CAAf,CAAtB,CAAJ,CADa;AAEzB+D,6BAAmB,EAAC,CAAC,EAAD,EAAI,CAAC,0DAAWhE,QAAZ,EAAsB,0DAAWC,GAAX,CAAe,CAAf,CAAtB,CAAJ;AAFK,SAAd,CAAb;AAID;;;;mCAEO;AACN,eAAKgE,IAAL,GAAY,KAAKH,eAAL,CAAqBM,QAArB,CAA8BC,QAA9B,CAAuCC,GAAvC,CAA2C,IAA3C,CAAZ;AACA;;;yCAEY;AACZ,eAAI,IAAInE,GAAR,IAAe,KAAKT,WAApB,EAAgC;AAC9B,iBAAKA,WAAL,CAAiBS,GAAjB,IAAwB,EAAxB;;AACA,gBAAGC,QAAQ,CAACC,cAAT,CAAwBF,GAAxB,KAAgC,IAAnC,EAAwC;AACtCC,sBAAQ,CAACC,cAAT,CAAwBF,GAAxB,EAA6BG,SAA7B,CAAuCC,MAAvC,CAA8C,eAA9C;AACD;AACF;;AAED,eAAKV,SAAL,GAAiB,KAAjB;;AAGA,cAAG,KAAKC,KAAL,CAAWa,KAAX,CAAiBoD,WAAjB,CAA6BnD,MAA7B,GAAsC,CAAzC,EAA2C;AACzC,iBAAKlB,WAAL,CAAiBqE,WAAjB,GAA+B,+CAA/B;;AACA,gBAAG3D,QAAQ,CAACC,cAAT,CAAwB,aAAxB,KAA0C,IAA7C,EAAkD;AAChDD,sBAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,SAAvC,CAAiDI,GAAjD,CAAqD,eAArD;AACD;;AACD,iBAAKb,SAAL,GAAiB,IAAjB;AACD;;AAED,cAAG,KAAKC,KAAL,CAAWa,KAAX,CAAiBoD,WAAjB,IAAgC,EAAhC,IAAsC,KAAKjE,KAAL,CAAWa,KAAX,CAAiBoD,WAAjB,IAAgC,KAAKjE,KAAL,CAAWa,KAAX,CAAiBqD,mBAA1F,EAA8G;AAC5G,iBAAKtE,WAAL,CAAiBsE,mBAAjB,GAAuC,+CAAvC;;AACA,gBAAG5D,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,KAAkD,IAArD,EAA0D;AACxDD,sBAAQ,CAACC,cAAT,CAAwB,qBAAxB,EAA+CC,SAA/C,CAAyDI,GAAzD,CAA6D,eAA7D;AACD;;AACD,iBAAKb,SAAL,GAAiB,IAAjB;AACD;;AAEF,iBAAO,KAAKA,SAAZ;AACA;;;kCAEM;AAAA;;AAEL,cAAI,KAAKgB,cAAL,EAAJ,EAA2B;AACzB,iBAAKkC,wBAAL,CAA8BjC,cAA9B,CAA6C,yCAA7C;AACA;AACD;;AAED,cAAG,KAAKrB,SAAR,EAAkB;AAChB;AACD;;AAED,eAAKA,SAAL,GAAiB,IAAjB;AAEA,cAAIsB,OAAO,GAAG;AAACkD,gBAAI,EAAC,KAAKA,IAAX;AAAiBF,uBAAW,EAAC,KAAKjE,KAAL,CAAWa,KAAX,CAAiBoD;AAA9C,WAAd;AAEA,eAAKvE,wBAAL,CAA8B+E,oBAA9B,CAAmDxD,OAAnD,EAA4DE,SAA5D,CACE,UAAAC,GAAG,EAAI;AACL,kBAAI,CAACzB,SAAL,GAAiB,KAAjB;AACA,gBAAI0B,QAAQ,GAAQD,GAApB;;AACA,gBAAGC,QAAQ,CAACV,MAAZ,EAAmB;AACjB,oBAAI,CAACsC,wBAAL,CAA8BxB,gBAA9B,CAA+C,sCAA/C;;AACA,oBAAI,CAAChC,MAAL,CAAY+B,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD,aAHD,MAGK;AACH,oBAAI,CAACyB,wBAAL,CAA8BxB,gBAA9B,CAA+C,iCAA/C;AACD;AACF,WAVH,EAUK,UAAAC,GAAG,EAAI;AACR,kBAAI,CAAC/B,SAAL,GAAiB,KAAjB;AACAgC,iBAAK,CAAC,gDAAD,CAAL;AAED,WAdH;AAgBD;;;;;;;uBAtFUoC,6B,EAA6B,qK,EAAA,+H,EAAA,oL,EAAA,2H,EAAA,gI,EAAA,uH;AAAA,K;;;YAA7BA,6B;AAA6B,iD;AAAA,e;AAAA,a;AAAA,0oB;AAAA;AAAA;ACf1C;;AAEE;;AAEE;;AACE;;AAAI;;AAAgC;;AAEpC;;AAA2D;;AAAoB;;AAC/E;;AACA;;AAAkB;;AAA2B;;AAE7C;;AAA8D;;AAAsB;;AACpF;;AACA;;AAAkB;;AAAmC;;AAErD;;AAEA;;AACE;;AAAiC;AAAA,mBAAS,IAAAT,OAAA,EAAT;AAAkB,WAAlB;;AAAjC;;AACF;;AACF;;AAEF;;AAEF;;;;AApBU;;AAAA;;AAKc;;AAAA;;AAIA;;AAAA;;AAEL;;AAAA;;;;;;;;;sEDANS,6B,EAA6B;cALzC,uDAKyC;eAL/B;AACTnF,kBAAQ,EAAE,4BADD;AAETC,qBAAW,EAAE,yCAFJ;AAGTC,mBAAS,EAAE,CAAC,yCAAD;AAHF,S;AAK+B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEf1C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAQA,QAAM4F,WAAW,GAAG;AAClBC,aAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAC,wBAAgB;AAAjB,OAAhB;AADS,KAApB;;QAOaC,wB;;;AAIX,wCAAmBC,mBAAnB,EAAqErF,IAArE,EAA+FJ,mBAA/F,EAAyI;AAAA;;AAAtH,aAAAyF,mBAAA,GAAAA,mBAAA;AAAkD,aAAArF,IAAA,GAAAA,IAAA;AAA0B,aAAAJ,mBAAA,GAAAA,mBAAA;AAF/F,aAAA0F,QAAA,GAAW,EAAX;AAGE,aAAKA,QAAL,GAAgBD,mBAAmB,CAAC1B,OAApC;AACD;;;;8BAEKlC,O,EAAO;AACX,iBAAO,KAAKzB,IAAL,CAAUuF,IAAV,CAAe,KAAKD,QAAL,GAAgB,qBAA/B,EAAsD7D,OAAtD,EAA+DyD,WAA/D,CAAP;AACD;;;mCAEUzD,O,EAAO;AAChB,iBAAO,KAAKzB,IAAL,CAAUuF,IAAV,CAAe,KAAKD,QAAL,GAAgB,0BAA/B,EAA2D7D,OAA3D,EAAoEyD,WAApE,CAAP;AACD;;;yCAEgBzD,O,EAAO;AACtB,iBAAO,KAAKzB,IAAL,CAAUuF,IAAV,CAAe,KAAKD,QAAL,GAAgB,4BAA/B,EAA6D7D,OAA7D,EAAsEyD,WAAtE,CAAP;AACD;;;6CAEoBzD,O,EAAO;AAC1B,iBAAO,KAAKzB,IAAL,CAAUuF,IAAV,CAAe,KAAKD,QAAL,GAAgB,2BAA/B,EAA4D7D,OAA5D,EAAqEyD,WAArE,CAAP;AACD;;;;;;;uBAtBUE,wB,EAAwB,iI,EAAA,uH,EAAA,0J;AAAA,K;;;aAAxBA,wB;AAAwB,eAAxBA,wBAAwB,K;AAAA,kBAFvB;;;;;sEAEDA,wB,EAAwB;cAHpC,wDAGoC;eAHzB;AACVI,oBAAU,EAAE;AADF,S;AAGyB,Q","file":"authentication-authentication-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthenticationComponent } from './authentication.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: 'login-admin',\r\n        loadChildren: () => import('./components/login-admin/login-admin.module').then(module => module.LoginAdminModule)\r\n      },\r\n      {\r\n        path: 'login',\r\n        loadChildren: () => import('./components/login/login.module').then(module => module.LoginModule)\r\n      },\r\n      {\r\n        path: 'motPasseOublier',\r\n        loadChildren: () => import('./components/mot-passe-oublier/mot-passe-oublier.module').then(module => module.MotPasseOublierModule)\r\n      },\r\n      {\r\n        path: 'RenitialiserMotdePasseOublie/:id',\r\n        loadChildren: () => import('./components/renisialiser-mot-passe/renisialiser-mot-passe.module').then(module => module.RenisialiserMotPasseModule)\r\n      }\r\n      ,\r\n      {\r\n        path: 'page-inaccessible',\r\n        loadChildren: () => import('./components/page-inaccessible/page-inaccessible.module').then(module => module.PageInaccessibleModule)\r\n      }\r\n    ]\r\n  }\r\n  \r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthenticationRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-authentication',\r\n  templateUrl: './authentication.component.html',\r\n  styleUrls: ['./authentication.component.scss']\r\n})\r\nexport class AuthenticationComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  \r\n\r\n}\r\n","<p>authentication works!</p>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\r\nimport { AuthenticationComponent } from './authentication.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { MotPasseOublierComponent } from './components/mot-passe-oublier/mot-passe-oublier.component';\r\nimport { RenisialiserMotPasseComponent } from './components/renisialiser-mot-passe/renisialiser-mot-passe.component';\r\nimport { LoadingComponent } from './components/loading/loading.component';\r\n\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { PageInaccessibleComponent } from './components/page-inaccessible/page-inaccessible.component';\r\nimport { SharedGlobalModule } from '../shared-global/shared-global.module';\r\nimport { LoginAdminComponent } from './components/login-admin/login-admin.component';\r\n\r\n@NgModule({\r\n  declarations: [AuthenticationComponent, LoginComponent, MotPasseOublierComponent, RenisialiserMotPasseComponent, LoadingComponent, PageInaccessibleComponent, LoginAdminComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AuthenticationRoutingModule,\r\n    FormsModule, ReactiveFormsModule,\r\n    SharedGlobalModule,\r\n  ]\r\n})\r\nexport class AuthenticationModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading',\r\n  templateUrl: './loading.component.html',\r\n  styleUrls: ['./loading.component.scss']\r\n})\r\nexport class LoadingComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"spinner-border text-primary\" role=\"status\">\r\n    <span class=\"sr-only\">Loading...</span>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router, Event } from '@angular/router';\r\nimport { InformationsService } from 'src/app/services/informations.service';\r\n\r\nimport { ToastNotificationService } from 'src/app/services/toast-notification.service';\r\nimport { ApiAuthenticationService } from 'src/app/services/authentication/api-authentication.service';\r\nimport { TokenStorageService } from 'src/app/services/authentication/token-storage.service';\r\n\r\nconst USER_ADMIN_KEY = 'USER_ADMIN_KEY';\r\n\r\n@Component({\r\n  selector: 'app-login-admin',\r\n  templateUrl: './login-admin.component.html',\r\n  styleUrls: ['./login-admin.component.scss']\r\n})\r\nexport class LoginAdminComponent implements OnInit {\r\n\r\n  formC:FormGroup\r\n  isLoading = false;\r\n \r\n  erreurLogin = {\r\n    email:\"\",\r\n    password:\"\"\r\n  }\r\n \r\n  isErreurs = false;\r\n\r\n  message \r\n \r\n  constructor(private tokenStorageService:TokenStorageService, private fb:FormBuilder, private notificationToast: ToastNotificationService , private informationsService:InformationsService, private http: HttpClient, private router:Router, private apiAuthenticationService:ApiAuthenticationService ) { \r\n    this.formC = this.fb.group({\r\n        email: ['', [Validators.required, Validators.min(2)]],\r\n        password:['',[Validators.required, Validators.min(2)]],\r\n    })\r\n  }\r\n\r\n  ngOnInit(): void { \r\n    this.tokenStorageService.signOut()\r\n  }\r\n\r\n  chargerErreurs(){\r\n\r\n    for(let key in this.erreurLogin){\r\n        this.erreurLogin[key] = \"\"\r\n        if(document.getElementById(key) != null){\r\n          document.getElementById(key).classList.remove(\"border-erreur\")\r\n        }\r\n    }\r\n\r\n    this.isErreurs = false\r\n  \r\n    if(this.formC.controls.email.status != \"VALID\"){\r\n      this.erreurLogin.email = \"Veuillez inserer votre email !\"\r\n      if(document.getElementById('email') != null){\r\n        document.getElementById('email').classList.add(\"border-erreur\")\r\n      }\r\n      this.isErreurs = true\r\n    }\r\n    \r\n    if(this.formC.value.password.length < 2){\r\n      this.erreurLogin.password = \"Veuillez inserer votre mot de passe !\"\r\n      if(document.getElementById('password') != null){\r\n        document.getElementById('password').classList.add(\"border-erreur\")\r\n      }\r\n      this.isErreurs = true\r\n    }\r\n\r\n    return this.isErreurs\r\n  }\r\n\r\n\r\n  login(){\r\n   \r\n    if(this.chargerErreurs()) {\r\n      this.notificationToast.showErrorSmall(\"Veuillez remplir les champs obligatoires !\")\r\n      return\r\n    }\r\n  \r\n    if(this.isLoading){\r\n      return \r\n    }\r\n\r\n    this.isLoading = true;\r\n    let request = {email:this.formC.value.email, password:this.formC.value.password}\r\n    \r\n    this.apiAuthenticationService.loginAdmin(request).subscribe(\r\n      res => {\r\n        this.isLoading = false\r\n        let response: any = res\r\n        if(response.status){\r\n          this.saveToken(response.token)\r\n          this.router.navigate(['/dashboard-admin/societe'])\r\n          this.notificationToast.showSuccessSmall(\"Veuillez verifier vos informations !!\")\r\n        }else{\r\n          this.isLoading = false\r\n          this.notificationToast.showErrorSmall(\"Veuillez verifier vos informations !!\")\r\n        }\r\n      }, err => {\r\n        this.isLoading = false\r\n        alert(\"Désole, ilya un problème de connexion internet\")\r\n      }\r\n    );\r\n  }\r\n\r\n  public saveToken(token: any): void {\r\n    this.tokenStorageService.saveToken(token, {})\r\n    this.tokenStorageService.saveRoleSuperAdmin()\r\n  }\r\n\r\n}\r\n","<section id=\"slider\" style=\"margin-top:8%; background-color:#1abc9c; height:100%;\">\r\n\r\n    <div class=\"slider-3\" style=\"width: fit-content; margin:0 auto;\">\r\n        <form [formGroup]=\"formC\">\r\n            <h1>Connexion</h1>\r\n            <!--<p>Si vous n'avez pas de compte d'utilisateur, vous pouvez en créer un - <a style=\"color: white;\" [routerLink]=\"['/Inscription']\">c'est gratuit.</a> </p>\r\n                                -->\r\n\r\n            <label><b>Nom d'utilisateur</b></label>\r\n            <input type=\"text\" class=\"form-control\" formControlName=\"email\" id=\"email\" placeholder=\"\">\r\n            <p class=\"erreur\">{{erreurLogin.email}}\r\n            </p>\r\n\r\n            <label><b>Mot de passe</b></label>\r\n            <input type=\"password\" class=\"form-control\" formControlName=\"password\" id=\"password\">\r\n            <p class=\"erreur\">{{erreurLogin.password}}\r\n            </p>\r\n\r\n            <app-loading *ngIf=\"isLoading\"></app-loading>\r\n\r\n            <div>\r\n                <a style=\"color:black;\" [routerLink]=\"['/authentication/motPasseOublier']\">Mot de passe oublié </a>\r\n                <input type=\"submit\" id='submit' value='LOGIN' (click)=\"login()\">\r\n            </div>\r\n            \r\n        </form>\r\n    </div>\r\n\r\n\r\n\r\n</section>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router, Event } from '@angular/router';\r\nimport { InformationsService } from 'src/app/services/informations.service';\r\n\r\nimport { ToastNotificationService } from 'src/app/services/toast-notification.service';\r\nimport { ApiAuthenticationService } from 'src/app/services/authentication/api-authentication.service';\r\nimport { TokenStorageService } from 'src/app/services/authentication/token-storage.service';\r\nimport { FonctionPartagesService } from 'src/app/services/fonction-partages.service';\r\nimport { SessionCaisseService } from 'src/app/services/serviceBD_Commerce/sessionCaisse.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  formC:FormGroup\r\n  isLoading = false;\r\n \r\n  erreurLogin = {\r\n    email:\"\",\r\n    password:\"\"\r\n  }\r\n \r\n  isErreurs = false;\r\n\r\n  message \r\n  \r\n\r\n  constructor(\r\n    private tokenStorageService:TokenStorageService, \r\n    private sessionCaisseSer: SessionCaisseService,\r\n    private fb:FormBuilder, private notificationToast: ToastNotificationService , \r\n    private informationsService:InformationsService, \r\n    private http: HttpClient, private router:Router, \r\n    private apiAuthenticationService:ApiAuthenticationService,\r\n    public fonctionPartagesService: FonctionPartagesService, ) { \r\n    this.formC = this.fb.group({\r\n      email: ['', [Validators.required, Validators.min(2)]],\r\n      password:['',[Validators.required, Validators.min(2)]],\r\n    })\r\n  }\r\n\r\n  ngOnInit(): void { \r\n   // this.tokenStorageService.signOut()\r\n  }\r\n\r\n  chargerErreurs(){\r\n\r\n    for(let key in this.erreurLogin){\r\n        this.erreurLogin[key] = \"\"\r\n        if(document.getElementById(key) != null){\r\n          document.getElementById(key).classList.remove(\"border-erreur\")\r\n        }\r\n    }\r\n\r\n    this.isErreurs = false\r\n  \r\n    if(this.formC.controls.email.status != \"VALID\"){\r\n      this.erreurLogin.email = \"Veuillez inserer votre email !\"\r\n      if(document.getElementById('email') != null){\r\n        document.getElementById('email').classList.add(\"border-erreur\")\r\n      }\r\n      this.isErreurs = true\r\n    }\r\n    \r\n    if(this.formC.value.password.length < 2){\r\n      this.erreurLogin.password = \"Veuillez inserer votre mot de passe !\"\r\n      if(document.getElementById('password') != null){\r\n        document.getElementById('password').classList.add(\"border-erreur\")\r\n      }\r\n      this.isErreurs = true\r\n    }\r\n\r\n    return this.isErreurs\r\n  }\r\n\r\n\r\n  login(){\r\n   \r\n    if(this.chargerErreurs()) {\r\n      this.notificationToast.showErrorSmall(\"Veuillez remplir les champs obligatoires !\")\r\n      return\r\n    }\r\n  \r\n    if(this.isLoading){\r\n      return \r\n    }\r\n\r\n    this.isLoading = true;\r\n    let request = {email:this.formC.value.email, password:this.formC.value.password}\r\n    \r\n    this.apiAuthenticationService.login(request).subscribe(\r\n      res => {\r\n        this.isLoading = false\r\n        let response: any = res\r\n        if(response.status){\r\n          this.tokenStorageService.saveToken(response.token, response.user)\r\n          this.tokenStorageService.saveUser(response.user)\r\n          this.openModalSocietes()\r\n        }else{\r\n          this.isLoading = false\r\n          this.notificationToast.showErrorSmall(\"Veuillez verifier vos informations !!\")\r\n        }\r\n      }, err => {\r\n        this.isLoading = false\r\n        alert(\"Désole, ilya un problème de connexion internet\")\r\n      }\r\n    );\r\n  }\r\n\r\n  isOpenModalSocietes = false\r\n  openModalSocietes(){\r\n    this.isOpenModalSocietes = true\r\n  }\r\n\r\n  closeModalSocietes(){\r\n    this.isOpenModalSocietes = false\r\n    this.openModalExercices()\r\n  }\r\n\r\n  isOpenModalExercices = false\r\n  openModalExercices(){\r\n    this.isOpenModalExercices = true\r\n  }\r\n\r\n  closeModalExercices(){\r\n    //this.getSessionCaisseUtilisateur() \r\n    this.router.navigate(['/dashboard/default'])\r\n      \r\n    this.isOpenModalExercices = false\r\n  }\r\n\r\n  getSessionCaisseUtilisateur() {\r\n    this.isLoading = true\r\n    let utilisateur = this.tokenStorageService.getUser()\r\n    this.sessionCaisseSer.utilisateur(utilisateur.id)\r\n      .subscribe(\r\n        res => {\r\n          this.isLoading = false\r\n          let resultat: any = res\r\n          if( resultat.status == false)\r\n             {\r\n               this.router.navigate(['sessionCaisses/ajout']) \r\n             }else{\r\n              let sessionCaisse = resultat.resultat\r\n              this.informationsService.setSessionCaisseCurrent(sessionCaisse)\r\n              this.router.navigate(['/dashboard/default'])\r\n             }\r\n        },\r\n        error => {\r\n          this.isLoading = false\r\n          alert(\"Désole, ilya un problème de connexion internet\")\r\n        });\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n","<section id=\"slider\" style=\"margin-top:8%; background-color:#1abc9c; height:100%;\">\r\n\r\n    <div class=\"slider-3\" style=\"width: fit-content; margin:0 auto;\">\r\n        <form [formGroup]=\"formC\">\r\n            <h1>Connexion</h1>\r\n            <!--<p>Si vous n'avez pas de compte d'utilisateur, vous pouvez en créer un - <a style=\"color: white;\" [routerLink]=\"['/Inscription']\">c'est gratuit.</a> </p>\r\n                                -->\r\n\r\n            <label><b>Nom d'utilisateur</b></label>\r\n            <input type=\"text\" class=\"form-control\" formControlName=\"email\" id=\"email\" placeholder=\"\">\r\n            <p class=\"erreur\">{{erreurLogin.email}}\r\n            </p>\r\n\r\n            <label><b>Mot de passe</b></label>\r\n            <input type=\"password\" class=\"form-control\" formControlName=\"password\" id=\"password\">\r\n            <p class=\"erreur\">{{erreurLogin.password}}\r\n            </p>\r\n\r\n            <app-loading *ngIf=\"isLoading\"></app-loading>\r\n\r\n            <div>\r\n                <a style=\"color:black;\" [routerLink]=\"['/authentication/motPasseOublier']\">Mot de passe oublié </a>\r\n                <input type=\"submit\" id='submit' value='LOGIN' (click)=\"login()\">\r\n            </div>\r\n            \r\n        </form>\r\n    </div>\r\n\r\n\r\n\r\n</section>\r\n\r\n<app-parametres-societes-modal  (closeModalAdd)=\"closeModalSocietes()\" [isOpenModalAdd]=\"isOpenModalSocietes\" ></app-parametres-societes-modal>\r\n\r\n<app-parametres-exercices-modal  (closeModalAdd)=\"closeModalExercices()\" [isOpenModalAdd]=\"isOpenModalExercices\" ></app-parametres-exercices-modal>\r\n","import { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router, Event } from '@angular/router';\r\nimport { InformationsService } from 'src/app/services/informations.service';\r\n\r\nimport { ToastNotificationService } from 'src/app/services/toast-notification.service';\r\nimport { ApiAuthenticationService } from 'src/app/services/authentication/api-authentication.service';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-mot-passe-oublier',\r\n  templateUrl: './mot-passe-oublier.component.html',\r\n  styleUrls: ['./mot-passe-oublier.component.scss']\r\n})\r\nexport class MotPasseOublierComponent implements OnInit { \r\n\r\n  formC:FormGroup\r\n  isLoading = false;\r\n  \r\n  erreurLogin = {\r\n    email:\"\"\r\n  }\r\n\r\n  isErreurs = false;\r\n\r\n  message \r\n  \r\n  constructor(private toastNotificationService:ToastNotificationService, private apiAuthenticationService:ApiAuthenticationService, private fb:FormBuilder, private informationsService:InformationsService, private http: HttpClient, private router:Router) { \r\n      this.formC = this.fb.group({\r\n        email: ['', [Validators.required, Validators.email,Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\r\n      })\r\n  }\r\n\r\n  ngOnInit(): void {\r\n   \r\n   }\r\n\r\n   chargerErreurs(){\r\n\r\n    for(let key in this.erreurLogin){\r\n        this.erreurLogin[key] = \"\"\r\n        if(document.getElementById(key) != null){\r\n          document.getElementById(key).classList.remove(\"border-erreur\")\r\n        }\r\n    }\r\n\r\n    this.isErreurs = false\r\n  \r\n    if(this.formC.controls.email.status != \"VALID\"){\r\n      this.erreurLogin.email = \"Veuillez inserer votre email !\"\r\n      if(document.getElementById('email') != null){\r\n        document.getElementById('email').classList.add(\"border-erreur\")\r\n      }\r\n      this.isErreurs = true\r\n    }\r\n    \r\n    return this.isErreurs\r\n  }\r\n\r\n  envoyer(){\r\n   \r\n    if (this.chargerErreurs()) {\r\n      return\r\n    }\r\n  \r\n    if(this.isLoading){\r\n      return \r\n    }\r\n\r\n    this.isLoading = true;\r\n\r\n    let request = {email:this.formC.value.email, baseUrl:this.informationsService.baseURLAngular+ \"/authentication/RenitialiserMotdePasseOublie\"}\r\n    \r\n    this.apiAuthenticationService.modifierMotPasse(request).subscribe(\r\n      res => {\r\n        this.isLoading = false\r\n        let response: any = res\r\n        if(response.status){\r\n          this.toastNotificationService.showSuccessSmall(\"Votre email est envoyé avec succès !!\")\r\n          this.router.navigate(['/authentication/login'])  \r\n        }else{\r\n          this.toastNotificationService.showErrorSmall(\"Veuillez vérifier votre email !!\")\r\n        }\r\n      }, err => {\r\n        this.isLoading = false\r\n        alert(\"Désole, ilya un problème de connexion internet\")\r\n    \r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n\r\n","<section id=\"slider\" style=\"margin-top:8%; background-color:#1abc9c; height:100%;\">\r\n    \r\n    <div class=\"slider-3\" style=\"width: fit-content; margin:0 auto;\">\r\n        <form [formGroup]=\"formC\">\r\n                                <h1>Email de récupération</h1> \r\n                                <!--<p>Si vous n'avez pas de compte d'utilisateur, vous pouvez en créer un - <a style=\"color: white;\" [routerLink]=\"['/Inscription']\">c'est gratuit.</a> </p>\r\n                                -->\r\n                                \r\n                                <label for=\"exampleFormControlInput1\" class=\"form-label\">Email</label>\r\n                                <input type=\"email\" class=\"form-control\" formControlName=\"email\"  id=\"email\" placeholder=\"\">\r\n                              \r\n                                <p class=\"erreur\">{{erreurLogin.email}}\r\n                                </p>\r\n                                  \r\n                                <app-loading *ngIf=\"isLoading\"></app-loading>\r\n                               \r\n                                <div style=\"width: 100%;\">\r\n                                    <input type=\"submit\" id='submit' (click)=\"envoyer()\"  value=\"Envoyer\">  \r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                      \r\n                \r\n</section>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { BrowserDynamicTestingModule } from '@angular/platform-browser-dynamic/testing';\r\n\r\n@Component({\r\n  selector: 'app-page-inaccessible',\r\n  templateUrl: './page-inaccessible.component.html',\r\n  styleUrls: ['./page-inaccessible.component.scss']\r\n})\r\nexport class PageInaccessibleComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    document.getElementsByTagName('html')[0].setAttribute(\"style\",\"background-color:white;\")\r\n    document.getElementsByTagName('body')[0].setAttribute(\"style\",\"\")\r\n \r\n    var clientHeight = document.getElementById('slider-1').clientHeight;\r\n    var windowsHeight = window.innerHeight;;\r\n    var marginTop = (windowsHeight - clientHeight) / 2\r\n    if(marginTop > 0){\r\n      document.getElementById('slider-1').setAttribute(\"style\", \"margin-top:\"+marginTop+\"px;\")\r\n      \r\n    }\r\n  }\r\n\r\n}\r\n","<section id=\"slider-1\">\r\n       <br>\r\n       <h2 style=\"color:#659685;; font-size:100px;\">404</h2>\r\n       <p style=\"color:gray; font-size:40px; font-weight: 900;\">Page non trouvée</p>\r\n       <p style=\"color:gray; font-size:20px;\">La page que vous tentez d'afficher n'existe pas ou un autre erreur s'est produite.\r\n        <br>Vous pouvez revenir à <a onclick=\"window.history.back();\">la page précédente</a> ou aller a <a href=\"#\">la page d'accueil</a>.</p>\r\n        <br>\r\n\r\n</section>\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router, Event } from '@angular/router';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { InformationsService } from 'src/app/services/informations.service';\r\n\r\nimport { ToastNotificationService } from 'src/app/services/toast-notification.service';\r\nimport { ApiAuthenticationService } from 'src/app/services/authentication/api-authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-renisialiser-mot-passe',\r\n  templateUrl: './renisialiser-mot-passe.component.html',\r\n  styleUrls: ['./renisialiser-mot-passe.component.scss']\r\n})\r\nexport class RenisialiserMotPasseComponent implements OnInit {\r\n  formC:FormGroup\r\n  isLoading = false;\r\n  \r\n  erreurLogin = {\r\n    newPassword:\"\",\r\n    newPasswordValidate:\"\"\r\n  }\r\n\r\n  isErreurs = false;\r\n\r\n  code=\"\"\r\n\r\n  constructor(private toastNotificationService:ToastNotificationService, private _Activatedroute:ActivatedRoute, private apiAuthenticationService :ApiAuthenticationService , private fb:FormBuilder, private http: HttpClient, private router:Router) { \r\n    console.log(\"renisialiser mot de passe\")\r\n    this.formC = this.fb.group({\r\n      newPassword:['',[Validators.required, Validators.min(6)]],\r\n      newPasswordValidate:['',[Validators.required, Validators.min(6)]],\r\n    })\r\n  }\r\n\r\n  ngOnInit(): void { \r\n    this.code = this._Activatedroute.snapshot.paramMap.get('id');\r\n   }\r\n\r\n  chargerErreurs(){\r\n    for(let key in this.erreurLogin){\r\n      this.erreurLogin[key] = \"\"\r\n      if(document.getElementById(key) != null){\r\n        document.getElementById(key).classList.remove(\"border-erreur\")\r\n      }\r\n    }\r\n\r\n    this.isErreurs = false\r\n  \r\n   \r\n    if(this.formC.value.newPassword.length < 6){\r\n      this.erreurLogin.newPassword = \"Veuillez inserer votre nouveau mot de passe !\"\r\n      if(document.getElementById('newPassword') != null){\r\n        document.getElementById('newPassword').classList.add(\"border-erreur\")\r\n      }\r\n      this.isErreurs = true\r\n    }\r\n\r\n    if(this.formC.value.newPassword != \"\" && this.formC.value.newPassword != this.formC.value.newPasswordValidate){\r\n      this.erreurLogin.newPasswordValidate = \"Veuillez repeter votre nouveau mot de passe !\"\r\n      if(document.getElementById('newPasswordValidate') != null){\r\n        document.getElementById('newPasswordValidate').classList.add(\"border-erreur\")\r\n      }\r\n      this.isErreurs = true\r\n    }\r\n\r\n   return this.isErreurs\r\n  }\r\n\r\n  envoyer(){\r\n   \r\n    if (this.chargerErreurs()) {\r\n      this.toastNotificationService.showErrorSmall(\"Veuillez vérifier votre mot de passe !!\")\r\n      return\r\n    }\r\n  \r\n    if(this.isLoading){\r\n      return \r\n    }\r\n\r\n    this.isLoading = true;\r\n\r\n    let request = {code:this.code, newPassword:this.formC.value.newPassword}\r\n    \r\n    this.apiAuthenticationService.renisialiserMotPasse(request).subscribe(\r\n      res => {\r\n        this.isLoading = false\r\n        let response: any = res\r\n        if(response.status){\r\n          this.toastNotificationService.showSuccessSmall(\"Votre mot de passe est enregistrée!!\")\r\n          this.router.navigate(['/'])\r\n        }else{\r\n          this.toastNotificationService.showSuccessSmall(\"Votre mot de passe est fausse!!\")\r\n        }\r\n      }, err => {\r\n        this.isLoading = false\r\n        alert(\"Désole, ilya un problème de connexion internet\")\r\n   \r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n\r\n","<section id=\"slider\" style=\"margin-top:8%; background-color:#1abc9c; height:100%;\">\r\n\r\n  <div class=\"slider-3\" style=\"width: fit-content; margin:0 auto;\">\r\n\r\n    <form [formGroup]=\"formC\">\r\n      <h1>Réinitialiser votre mot de passe</h1>\r\n\r\n      <label for=\"exampleFormControlInput588\" class=\"form-label\">Nouveau mot de passe</label>\r\n      <input type=\"password\" class=\"form-control\" formControlName=\"newPassword\" id=\"newPassword\" placeholder=\"\">\r\n      <p class=\"erreur\">{{erreurLogin.newPassword}}</p>\r\n\r\n      <label for=\"exampleFormControlTextarea589\" class=\"form-label\">Confirmer mot de passe</label>\r\n      <input type=\"password\" class=\"form-control\" formControlName=\"newPasswordValidate\" id=\"newPasswordValidate\">\r\n      <p class=\"erreur\">{{erreurLogin.newPasswordValidate}}</p>\r\n\r\n      <app-loading *ngIf=\"isLoading\"></app-loading>\r\n\r\n      <div style=\"width: 100%;\">\r\n        <input type=\"submit\" id='submit' (click)=\"envoyer()\" value=\"Enregistrer\">\r\n      </div>\r\n    </form>\r\n\r\n  </div>\r\n\r\n</section>","import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {TokenStorageService} from '../../services/authentication/token-storage.service';\r\nimport { InformationsService } from '../informations.service';\r\n\r\n\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiAuthenticationService {\r\n\r\n  AUTH_API = \"\"\r\n\r\n  constructor(public informationGenerale: InformationsService, private http: HttpClient, private tokenStorageService: TokenStorageService) {\r\n    this.AUTH_API = informationGenerale.baseUrl\r\n  }\r\n\r\n  login(request): Observable<any> {\r\n    return this.http.post(this.AUTH_API + '/utilisateurs/login', request, httpOptions);\r\n  }\r\n\r\n  loginAdmin(request): Observable<any> {\r\n    return this.http.post(this.AUTH_API + '/utilisateurs/loginAdmin', request, httpOptions);\r\n  }\r\n\r\n  modifierMotPasse(request): Observable<any> {\r\n    return this.http.post(this.AUTH_API + '/emails/emailMotPasseEmail', request, httpOptions);\r\n  }\r\n\r\n  renisialiserMotPasse(request): Observable<any> {\r\n    return this.http.post(this.AUTH_API + '/utilisateurs/newPassword', request, httpOptions);\r\n  }\r\n\r\n}\r\n\r\n"]}